modelo_NB = naiveBayes(planejamento[,1:4],    #Eh um data.frame ou matriz contendo os exemplares de treinamento
planejamento[,5],      #Eh o vetor com as classes para cada exemplar do conjunto de treinamento
0                      #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
)
fix(planejamento)
modelo_NB = naiveBayes(planejamento[,1:4],    #Eh um data.frame ou matriz contendo os exemplares de treinamento
planejamento[,5],      #Eh o vetor com as classes para cada exemplar do conjunto de treinamento
0                      #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
)
exemplar_teste=data.frame(previsao="sol", temperatura="frio", humidade="normal", vento="sim")
y_estimado = predict(modelo_NB,               #Eh o modelo contruido pela funcao naiveBayes()
exemplar_teste,          #Eh o exemplo de teste
type="class",            #Eh o parametro com dois valores possiveis: "class" se o resultado eh apresentado apenas pela classe de maior probabilidade ou "raw" pela probabilidade de cada classe
0)                       #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
y_estimado
y_estimado = predict(modelo_NB,               #Eh o modelo contruido pela funcao naiveBayes()
exemplar_teste,          #Eh o exemplo de teste
type="raw",              #Eh o parametro com dois valores possiveis: "class" se o resultado eh apresentado apenas pela classe de maior probabilidade ou "raw" pela probabilidade de cada classe
0)                       #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
y_estimado
planejamento
planejamento=iris
iris
modelo_NB = naiveBayes(planejamento[,1:3],    #Eh um data.frame ou matriz contendo os exemplares de treinamento
planejamento[,4],      #Eh o vetor com as classes para cada exemplar do conjunto de treinamento
0                      #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
)
modelo_NB = naiveBayes(planejamento[,1:4],    #Eh um data.frame ou matriz contendo os exemplares de treinamento
planejamento[,5],      #Eh o vetor com as classes para cada exemplar do conjunto de treinamento
0                      #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
)
exemplar_teste=data.frame(Sepal.Length = 7.7, Sepal.Width= 2.8, Petal.Length=6.7, Petal.Width=2)
y_estimado = predict(modelo_NB,               #Eh o modelo contruido pela funcao naiveBayes()
exemplar_teste,          #Eh o exemplo de teste
type="class",            #Eh o parametro com dois valores possiveis: "class" se o resultado eh apresentado apenas pela classe de maior probabilidade ou "raw" pela probabilidade de cada classe
0)                       #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
y_estimado
y_estimado = predict(modelo_NB,               #Eh o modelo contruido pela funcao naiveBayes()
exemplar_teste,          #Eh o exemplo de teste
type="raw",              #Eh o parametro com dois valores possiveis: "class" se o resultado eh apresentado apenas pela classe de maior probabilidade ou "raw" pela probabilidade de cada classe
0)                       #Eh um numero real positivo que controla a suavezacao de Laplace. O default eh zero, desabilitando-a
y_estimado
library(e1071)
credito  = read.csv(choose.files(), header=T, sep="")
credito  = read.csv(choose.files(), header=T)
head(cre)
head(credito)
str(credito)
library(e1071)
credito  = read.csv(choose.files(), header=T)
head(credito)
str(credito)
dim(credito)
amostra = sample(1:2,1000, replace=T, prob=c(0.7,0.3));amostra
creditotreino=credito[amostra==1,]
creditoteste=credito[amostra==2,]
dim(creditotreino)
dim(creditoteste)
modelo=naiveBayes( class ~ . ,    #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
credito  )            #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
modelo=naiveBayes( class ~ . ,      #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino  )       #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
predicao = predict( modelo , credito teste )
predicao = predict( modelo , creditoteste )
predicao = predict( modelo , creditoteste );predicao
confusao = table(creditoteste$class, predicao)
confusao = table(creditoteste$class, predicao);confusao
txacerto = (confusao[1]+confusao[4])/sum(confusao)
txacerto = (confusao[1]+confusao[4])/sum(confusao);txacerto
txerro = (confusao[2]+confusao[3])/sum(confusao)
txerro = (confusao[2]+confusao[3])/sum(confusao);txerro
novocredito = read.csv(file.choose(), header=T)
fix(novocredito)
novocredito = read.csv(file.choose(), header=T, sep=",")
fix(novocredito)
novocredito
dim(novocredito)
predict(modelo, novocredito)
credito  = read.csv(choose.files(), header=T)
modelo = svm(class ~ . ,    #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino) #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
predicao = predict( modelo ,              #Modelo que sera utilizado
creditoteste )        #conjunto de dados para o teste, note que deve ter o mesmo formato dos dados
predicao
confusao = table(creditoteste$class, predicao);confusao
txacerto = (confusao[1]+confusao[4])/sum(confusao);txacerto
txerro = (confusao[2]+confusao[3])/sum(confusao);txerro
library(FSelector)
library(FSelector, dependencies=T)
random.forest.importance(class ~ . , credito)
modelo
predicao = predict(modelo, creditoteste)
confusao = table(creditoteste$class, predicao)
confusao = table(creditoteste$class, predicao);confusao
txacerto2 = (confusao[1]+confusao[4])/sum(confusao)
txacerto2 = (confusao[1]+confusao[4])/sum(confusao);txacerto2
txacerto
random.forest.importance(class ~ . , credito)
modelo = svm(class ~cheking_status + duration + credit_history + purpose, #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino)                                               #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo = svm(class ~ checking_status + duration + credit_history + purpose, #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino)                                               #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
predicao = predict(modelo, creditoteste);predicao
confusao = table(creditoteste$class, predicao);confusao
txacerto2 = (confusao[1]+confusao[4])/sum(confusao);txacerto2
txacerto
#Machine Learning - Selecao de Atributos
#Pacotes necessarios:
library(e1071)       #Para o modelo
library(FSelector)   #Metodos para selecionar os atributos
# Maquina de vetor de Suporte -------------------------------------------------------------
#O banco de dados que sera utilizado neste exemplo:
credito  = read.csv(choose.files(), header=T)
#Vejamos informacoes sobre esta relacao:
head(credito)
str(credito)
dim(credito)
#Dividir esse conjunto de dados em 2:
#700 registros / 300 registros
#Primeiramente:
amostra = sample(1:2,1000, replace=T, prob=c(0.7,0.3));amostra
#O conjunto de treino:
creditotreino=credito[amostra==1,]
dim(creditotreino)
#O conjunto de teste:
creditoteste=credito[amostra==2,]
dim(creditoteste)
#note que n√£o esta dividido 70%/30% porque esta gerando amostra 1000
#vezes, e estas sao independentes com probabilidades diferentes
#De forma aleatoria e que sejam mutualmente exclusivas
# O modelo ----------------------------------------------------------------
modelo = svm(class ~ . ,    #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino) #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
#Agora vamos utilizar os dados de teste para avaliar o desempenho do modelo
# Previsao ----------------------------------------------------------------
#Para fazer a previsao:
predicao = predict( modelo ,              #Modelo que sera utilizado
creditoteste )        #conjunto de dados para o teste, note que deve ter o mesmo formato dos dados
predicao
# Matriz de confusao ------------------------------------------------------
#Matriz de confusao:
confusao = table(creditoteste$class, predicao);confusao
#Calculando as metricas:
#taxa de acerto:
txacerto = (confusao[1]+confusao[4])/sum(confusao);txacerto
#taxa de erro:
txerro = (confusao[2]+confusao[3])/sum(confusao);txerro
#Se o modelo nao tiver enviesado, espera-se que tenha uma taxa de acerto
#Semelhante paraa producao
# Selecao de Atributos ----------------------------------------------------
#Utilizaremos o metodo random.forest.importance
random.forest.importance(class ~ . , credito)
#Isto mostra o quanto cada um eh importante para fazer uma previsao correta
#Com esta lista em maos criarei novamente o modelo com os atributos relevantes
# Criando novamente o modelo ------------------------------------------------------------
modelo = svm(class ~ checking_status + duration + credit_history + purpose, #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino)                                               #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
predicao = predict(modelo, creditoteste);predicao
confusao = table(creditoteste$class, predicao);confusao
txacerto2 = (confusao[1]+confusao[4])/sum(confusao);txacerto2
txacerto
credito  = read.csv(choose.files(), header=T)
head(credito)
str(credito)
dim(credito)
amostra = sample(1:2,1000, replace=T, prob=c(0.7,0.3));amostra
creditotreino=credito[amostra==1,]
dim(creditotreino)
creditoteste=credito[amostra==2,]
dim(creditoteste)
modelo = svm(class ~ . ,    #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino) #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
predicao = predict( modelo ,              #Modelo que sera utilizado
creditoteste )        #conjunto de dados para o teste, note que deve ter o mesmo formato dos dados
predicao
confusao = table(creditoteste$class, predicao);confusao
txacerto = (confusao[1]+confusao[4])/sum(confusao);txacerto
txerro = (confusao[2]+confusao[3])/sum(confusao);txerro
random.forest.importance(class ~ . , credito)
modelo = svm(class ~ checking_status + duration + credit_history + purpose, #os atributos que vou utilizar para treinar o modelo, separado por ~ para denominar a variavel explicativa e a variavel resposta
creditotreino)                                               #os dados de treino, para treinar o modelo, sao aqueles 70% que buscamos
modelo
predicao = predict(modelo, creditoteste);predicao
confusao = table(creditoteste$class, predicao);confusao
txacerto2 = (confusao[1]+confusao[4])/sum(confusao);txacerto2
txacerto
corpus = VCorpus(DirSource("C:/Users/felipe.carvalho/Documents/WPP R/WhatsApp Corda/chat",encoding="UTF-8"),  #Local do corpus e codificacao do arquivo
readerControl = list(reader=readPlain, language="pt")  #texto plano em portugues
)
library("tidyverse")
library("ggthemes")
library("readr")
library(tm)
library(wordcloud)
library(stringr)
dados <- read_delim("C:/Users/felipe.carvalho/Documents/WPP R/WhatsApp Corda/chat.txt",
delim = " ",
col_names = FALSE)
dados <- dados %>% mutate(X1 = gsub(',', '', dados$X1))
dados$X1 <- as.Date(dados$X1, "%d/%m/%y")
dados <- dados %>% rename(datas = "X1")
dados$mes  <- months(dados$datas, abbreviate = TRUE)
dados$dia  <- weekdays(dados$datas, abbreviate = TRUE)
ggplot(na.omit(dados), aes(x = reorder(dia, dia, function(x)-length(x)),
fill = reorder(mes,mes, function(x)-length(x)))) +
geom_bar() +
theme_gdocs() +
ggtitle("Dias da semana mais ativos, por m√™s") +
labs(x = "Dias", y = "Quantidade", fill = "Meses")
ggplot(na.omit(dados), aes(x = reorder(mes, mes, function(x)-length(x)),                    fill = reorder(dia, dia, function(x)-length(x)))) +
geom_bar() +
theme_gdocs() +
ggtitle("Meses mais ativos, por dias da semana") +
labs(x = "Meses", y = "Quantidade", fill = "Dias")
corpus = VCorpus(DirSource("C:/Users/felipe.carvalho/Documents/WPP R/WhatsApp Corda/chat",encoding="UTF-8"),  #Local do corpus e codificacao do arquivo
readerControl = list(reader=readPlain, language="pt")  #texto plano em portugues
)
corpus = tm_map(corpus, removeWords, stopwords("pt"))
corpus = tm_map(corpus, stripWhitespace)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeNumbers)
freq=TermDocumentMatrix(corpus)
matriz = as.matrix(freq)
matriz = sort(rowSums(matriz), decreasing=T)
matriz = data.frame(word=names(matriz), freq = matriz)
freq=matriz[-c(1:14,17:21,23,25:31,41,44,45,47:53,55:60,64,65,67:69,71:74,76:80,82,83,86:88,91:93,95,96),]
freq
head(matriz, n=100)
freq=matriz[-c(1:14,17:21,23,25:31,41,44,45,47:53,55:60,64,65,67:69,71:74,76:80,82,83,86:88,91:93,95,96),]
freq
head(freq)
head(freq, n=100)
cbind(head(freq, n=100),1:100)
head(freq, n=100)
setwd("~/Rpubs")
library(dplyr)
setwd("~/Estatistica Aplicada II/dplyr/Material aula")
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(base)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
#Leitura da base de dados suicidios.csv
#Transformando a vari√°vel suicidio por arma de fogo em um factor
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
#Transformando a vari√°vel Microrregiao em um factor
base$Microrregiao = factor(base$Microrregiao)
#Transformando a vari√°vel Escolaridade em um ordered
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
#Transformando a vari√°vel estado civil em um factor
base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
#Transformando a vari√°vel raca em um factor
base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
#Transformando a vari√°vel sexo em um factor
base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
#Transformando a vari√°vel id_legal em um factor
base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
#Transformando a vari√°vel trab_armado em um factor
base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
summary(base)
# Selecionando 3 linhas aleatoriamente
sample_n(base,3)
library(readr)
base <- read_csv("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv")
View(base)
library(readr)
suicidios <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(suicidios)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",
";", escape_double = FALSE, trim_ws = TRUE)
#Leitura da base de dados suicidios.csv
#Transformando a vari√°vel suicidio por arma de fogo em um factor
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
#Transformando a vari√°vel Microrregiao em um factor
base$Microrregiao = factor(base$Microrregiao)
#Transformando a vari√°vel Escolaridade em um ordered
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
#Transformando a vari√°vel estado civil em um factor
base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
#Transformando a vari√°vel raca em um factor
base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
#Transformando a vari√°vel sexo em um factor
base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
#Transformando a vari√°vel id_legal em um factor
base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
#Transformando a vari√°vel trab_armado em um factor
base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
summary(base)
# Selecionando 3 linhas aleatoriamente
sample_n(base,3)
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
base$Microrregiao = factor(base$Microrregiao)
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
summary(base)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(base)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",";", escape_double = FALSE, trim_ws = TRUE)
base$suicidio_paf
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
base$escolaridade
#Leitura da base de dados suicidios.csv
#Transformando a vari√°vel suicidio por arma de fogo em um factor
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
#Transformando a vari√°vel Microrregiao em um factor
base$Microrregiao = factor(base$Microrregiao)
#Transformando a vari√°vel Escolaridade em um ordered
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
#Transformando a vari√°vel estado civil em um factor
base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
#Transformando a vari√°vel raca em um factor
base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
#Transformando a vari√°vel sexo em um factor
base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
#Transformando a vari√°vel id_legal em um factor
base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
#Transformando a vari√°vel trab_armado em um factor
base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
summary(base)
base$escolaridade
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
base$escolaridade
sample_n(base,3)
base
sample_n(base,3)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",";", escape_double = FALSE, trim_ws = TRUE)
summary(base)
# Selecionando 3 linhas aleatoriamente
sample_n(base,3)
base
sample_n(base,3)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",";", escape_double = FALSE, trim_ws = TRUE)
# #Leitura da base de dados suicidios.csv
# #Transformando a vari√°vel suicidio por arma de fogo em um factor
# base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
#
# #Transformando a vari√°vel Microrregiao em um factor
# base$Microrregiao = factor(base$Microrregiao)
#
# #Transformando a vari√°vel Escolaridade em um ordered
# base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
#
# #Transformando a vari√°vel estado civil em um factor
# base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
#
# #Transformando a vari√°vel raca em um factor
# base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
#
# #Transformando a vari√°vel sexo em um factor
# base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
#
# #Transformando a vari√°vel id_legal em um factor
# base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
#
# #Transformando a vari√°vel trab_armado em um factor
# base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
summary(base)
#Calculando a dimensao da base
dim(base)
# excluindo linhas iguais
base2=distinct(base)
dim(base2)
# excluindo linhas que possuem Microrregiao igual
base3=distinct(base,Microrregiao)
dim(base3)
# excluindo linhas que possuem idade e escolatridade iguais
base4=distinct(base,idade, escolaridade)
dim(base4)
# Selecionando a variavel idade e  todas as vari√°veis de trabalho armado at√© raca na base
base5=select(base,idade, trab_armado:raca)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",";", escape_double = FALSE, trim_ws = TRUE)
#Leitura da base de dados suicidios.csv
#Transformando a vari√°vel suicidio por arma de fogo em um factor
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
#Transformando a vari√°vel Microrregiao em um factor
base$Microrregiao = factor(base$Microrregiao)
#Transformando a vari√°vel Escolaridade em um ordered
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
#Transformando a vari√°vel estado civil em um factor
base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
#Transformando a vari√°vel raca em um factor
base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
#Transformando a vari√°vel sexo em um factor
base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
#Transformando a vari√°vel id_legal em um factor
base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
#Transformando a vari√°vel trab_armado em um factor
base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
summary(base)
#Calculando a dimensao da base
dim(base)
# excluindo linhas iguais
base2=distinct(base)
dim(base2)
# excluindo linhas que possuem Microrregiao igual
base3=distinct(base,Microrregiao)
dim(base3)
# excluindo linhas que possuem idade e escolatridade iguais
base4=distinct(base,idade, escolaridade)
dim(base4)
# Selecionando a variavel idade e  todas as vari√°veis de trabalho armado at√© raca na base
base5=select(base,idade, trab_armado:raca)
setwd("~/Estatistica Aplicada II/dplyr/Material aula")
setwd("~/Estatistica Aplicada II/dplyr/Material aula")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",";", escape_double = FALSE, trim_ws = TRUE)
base5=select(base,idade, trab_armado:raca)
base
trab_armado
setwd("~/Estatistica Aplicada II/dplyr/Material aula")
library(dplyr)
library(readr)
base <- read_delim("~/Estatistica Aplicada II/dplyr/Material aula/suicidios.csv",
";", escape_double = FALSE, trim_ws = TRUE)
base=read.csv("suicidios.csv", header=T, sep=";")
base
setwd("~/Estatistica Aplicada II/dplyr/Material aula")
library(dplyr)
base=read.csv("suicidios.csv", header=T, sep=";")
# 2 - Leitura da base de dados
# Inicialmente vamos fazer a importa√ß√£o da base suicidios.
#Transformando a vari√°vel sexo em um factor e indicando os r√≥tulos de cada categoria
head(base)
# Tratando as vari√°veis qualitativas:
#Transformando a vari√°vel suicidio por arma de fogo em um factor
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
#Transformando a vari√°vel Microrregiao em um factor
base$Microrregiao = factor(base$Microrregiao)
#Transformando a vari√°vel Escolaridade em um ordered
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
#Transformando a vari√°vel estado civil em um factor
base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
#Transformando a vari√°vel raca em um factor
base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
#Transformando a vari√°vel sexo em um factor
base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
#Transformando a vari√°vel id_legal em um factor
base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
#Transformando a vari√°vel trab_armado em um factor
base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
#Visualizando a base
head(base)
setwd("~/Estatistica Aplicada II/dplyr/Material aula")
library(dplyr)
base=read.csv("suicidios.csv", header=T, sep=";")
# 2 - Leitura da base de dados
# Inicialmente vamos fazer a importa√ß√£o da base suicidios.
#Transformando a vari√°vel sexo em um factor e indicando os r√≥tulos de cada categoria
head(base)
# Tratando as vari√°veis qualitativas:
#Transformando a vari√°vel suicidio por arma de fogo em um factor
base$suicidio_paf = factor(base$suicidio_paf, labels=c("N√£o","Sim"))
#Transformando a vari√°vel Microrregiao em um factor
base$Microrregiao = factor(base$Microrregiao)
#Transformando a vari√°vel Escolaridade em um ordered
base$escolaridade = ordered(base$escolaridade,levels=c(1,2,3,4,5,6), labels=c("Analfabeto","1 a 3","4 a 7","8 a 11", "12 ou mais","Desconhecido"))
#Transformando a vari√°vel estado civil em um factor
base$estado_civil = factor(base$estado_civil, labels=c("Solteiro","Uni√£o estavel","Casado","Viuvo", "Divorciado","Desconhecido"))
#Transformando a vari√°vel raca em um factor
base$raca = factor(base$raca, labels=c("Branco","Negro","Amarelo","Pardo", "Indigena","Desconhecido"))
#Transformando a vari√°vel sexo em um factor
base$sexo = factor(base$sexo, labels=c("Masculino","Feminino"))
#Transformando a vari√°vel id_legal em um factor
base$id_legal = factor(base$id_legal, labels=c("N√£o","Sim"))
#Transformando a vari√°vel trab_armado em um factor
base$trab_armado = factor(base$trab_armado, labels=c("N√£o","Sim"))
#Visualizando a base
head(base)
summary(base)
# 3 - Pacote dplyr
# O pacote dplyr √© um dos pacotes mais poderosos e populares do R, desenvolvido por Hadley Wickham.
#
# O dplyr √© um poderoso pacote R para manipular, limpar e resumir dados n√£o estruturados. Em suma, faz a explora√ß√£o de dados e manipula√ß√£o de dados de forma f√°cil e r√°pida no R.
# Carregando o pacote dplyr
library(dplyr)
# 3.1 - Selecionando n linhas aleatorias: fun√ß√£o sample_n(‚Ä¶)
# Selecionando 3 linhas aleatoriamente
sample_n(base,3)
devtools::install_github("hadley/dplyr")
