,axis.title.y = theme_blank()
,axis.title.x = theme_blank()
,legend.position='none'
)
size_scale = scale_size(limits = c(0,1),to=cor_text_limits)
return(
ggplot()+
points_layer+
lm_ribbon_layer+
lm_line_layer+
var_text+
cor_text+
f+
o+
size_scale
)
}
library(MASS)
N=100
variance1=1
variance2=2
mean1=10
mean2=20
rho = .8
Sigma=matrix(c(variance1,sqrt(variance1*variance2)*rho,sqrt(variance1*variance2)*rho,variance2),2,2)
pair1=mvrnorm(N,c(mean1,mean2),Sigma,empirical=T)
variance1=10
variance2=20
mean1=100
mean2=200
rho = -.4
Sigma=matrix(c(variance1,sqrt(variance1*variance2)*rho,sqrt(variance1*variance2)*rho,variance2),2,2)
pair2=mvrnorm(N,c(mean1,mean2),Sigma,empirical=T)
my_data=data.frame(cbind(pair1,pair2))
ggcorplot(
data = my_data
, var_text_size = 30
, cor_text_limits = c(2,30)
)
my_data
ggcorplot(
data = my_data
, var_text_size = 30
, cor_text_limits = c(2,30)
)
library(ggplot2)
#define a helper function (borrowed from the "ez" package)
ezLev=function(x,new_order){
for(i in rev(new_order)){
x=relevel(x,ref=i)
}
return(x)
}
ggcorplot = function(data,var_text_size,cor_text_limits){
# normalize data
for(i in 1:length(data)){
data[,i]=(data[,i]-mean(data[,i]))/sd(data[,i])
}
# obtain new data frame
z=data.frame()
i = 1
j = i
while(i<=length(data)){
if(j>length(data)){
i=i+1
j=i
}else{
x = data[,i]
y = data[,j]
temp=as.data.frame(cbind(x,y))
temp=cbind(temp,names(data)[i],names(data)[j])
z=rbind(z,temp)
j=j+1
}
}
names(z)=c('x','y','x_lab','y_lab')
z$x_lab = ezLev(factor(z$x_lab),names(data))
z$y_lab = ezLev(factor(z$y_lab),names(data))
z=z[z$x_lab!=z$y_lab,]
#obtain correlation values
z_cor = data.frame()
i = 1
j = i
while(i<=length(data)){
if(j>length(data)){
i=i+1
j=i
}else{
x = data[,i]
y = data[,j]
x_mid = min(x)+diff(range(x))/2
y_mid = min(y)+diff(range(y))/2
this_cor = cor(x,y)
this_cor.test = cor.test(x,y)
this_col = ifelse(this_cor.test$p.value<.05,'<.05','>.05')
this_size = (this_cor)^2
cor_text = ifelse(
this_cor>0
,substr(format(c(this_cor,.123456789),digits=2)[1],2,4)
,paste('-',substr(format(c(this_cor,.123456789),digits=2)[1],3,5),sep='')
)
b=as.data.frame(cor_text)
b=cbind(b,x_mid,y_mid,this_col,this_size,names(data)[j],names(data)[i])
z_cor=rbind(z_cor,b)
j=j+1
}
}
names(z_cor)=c('cor','x_mid','y_mid','p','rsq','x_lab','y_lab')
z_cor$x_lab = ezLev(factor(z_cor$x_lab),names(data))
z_cor$y_lab = ezLev(factor(z_cor$y_lab),names(data))
diag = z_cor[z_cor$x_lab==z_cor$y_lab,]
z_cor=z_cor[z_cor$x_lab!=z_cor$y_lab,]
#start creating layers
points_layer = layer(
geom = 'point'
, data = z
, mapping = aes(
x = x
, y = y
)
)
lm_line_layer = layer(
geom = 'line'
, geom_params = list(colour = 'red')
, stat = 'smooth'
, stat_params = list(method = 'lm')
, data = z
, mapping = aes(
x = x
, y = y
)
)
lm_ribbon_layer = layer(
geom = 'ribbon'
, geom_params = list(fill = 'green', alpha = .5)
, stat = 'smooth'
, stat_params = list(method = 'lm')
, data = z
, mapping = aes(
x = x
, y = y
)
)
cor_text = layer(
geom = 'text'
, data = z_cor
, mapping = aes(
x=y_mid
, y=x_mid
, label=cor
, size = rsq
, colour = p
)
)
var_text = layer(
geom = 'text'
, geom_params = list(size=var_text_size)
, data = diag
, mapping = aes(
x=y_mid
, y=x_mid
, label=x_lab
)
)
f = facet_grid(y_lab~x_lab,scales='free')
o = opts(
panel.grid.minor = theme_blank()
,panel.grid.major = theme_blank()
,axis.ticks = theme_blank()
,axis.text.y = theme_blank()
,axis.text.x = theme_blank()
,axis.title.y = theme_blank()
,axis.title.x = theme_blank()
,legend.position='none'
)
size_scale = scale_size(limits = c(0,1),to=cor_text_limits)
return(
ggplot()+
points_layer+
lm_ribbon_layer+
lm_line_layer+
var_text+
cor_text+
f+
o+
size_scale
)
}
#set up some fake data
library(MASS)
N=100
#first pair of variables
variance1=1
variance2=2
mean1=10
mean2=20
rho = .8
Sigma=matrix(c(variance1,sqrt(variance1*variance2)*rho,sqrt(variance1*variance2)*rho,variance2),2,2)
pair1=mvrnorm(N,c(mean1,mean2),Sigma,empirical=T)
#second pair of variables
variance1=10
variance2=20
mean1=100
mean2=200
rho = -.4
Sigma=matrix(c(variance1,sqrt(variance1*variance2)*rho,sqrt(variance1*variance2)*rho,variance2),2,2)
pair2=mvrnorm(N,c(mean1,mean2),Sigma,empirical=T)
my_data=data.frame(cbind(pair1,pair2))
ggcorplot(
data = my_data
, var_text_size = 30
, cor_text_limits = c(2,30)
)
setwd("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Modelo_naive_bayes_text_mine")
knitr::opts_chunk$set(echo = TRUE)
#Pacotes que serao utilizados:
require(tm,warn.conflicts = F)       #Pacote de para text mining
require(caret,warn.conflicts = F)    #Pacote para matriz de confusao
require(wordcloud,warn.conflicts = F)#Pacote para nuvem de palavras
require(readxl,warn.conflicts = F)   #Pacote para leitura de dados excel
require(e1071,warn.conflicts = F)    #PAcote para rodar o modelo naive bayes
#Leitura da base de dados:
dados <- read_excel("monitoramento_redes_sociais_classificacao.xls")  #Necessario estar no diretorio do banco de dados
names(dados) #Conferindo variaveis presentes no banco de dados
#Pacotes que serao utilizados:
require(tm,warn.conflicts = F,quietly = T)       #Pacote de para text mining
require(caret,warn.conflicts = F,quietly = T)    #Pacote para matriz de confusao
require(wordcloud,warn.conflicts = F,quietly = T)#Pacote para nuvem de palavras
require(readxl,warn.conflicts = F,quietly = T)   #Pacote para leitura de dados excel
require(e1071,warn.conflicts = F,quietly = T)    #PAcote para rodar o modelo naive bayes
#Leitura da base de dados:
dados <- read_excel("monitoramento_redes_sociais_classificacao.xls")  #Necessario estar no diretorio do banco de dados
names(dados) #Conferindo variaveis presentes no banco de dados
#Variaveis que serao utilizadas:
x=dados[,c("Reclamação")]#Explicativa
y=dados[,c("Classe")]# Resposta
#Criando o corpus para o tratamento das variaveis com pacote library(tm):
corpus <- Corpus(DataframeSource(x))
#Para remmover as stopwords:
corpus = tm_map(corpus, removeWords, stopwords("portuguese"))
#Para remover excessos de espaços em branco:
corpus = tm_map(corpus, stripWhitespace)
#Para remover pontuacao:
corpus = tm_map(corpus, removePunctuation)
#Para remover numeros:
corpus = tm_map(corpus, removeNumbers)
#Para colocar todas as letras como minusculas:
corpus = tm_map(corpus, content_transformer(tolower))
#Criando a matrix de termos:
corpus_tf=TermDocumentMatrix(corpus, control = list(minWordLength=1,minDocFreq=1))
# #Transformando em matrix, permitindo a manipulacao:
# matrix=as.matrix(corpus_tf)
#Caso tenha interesse em normalizar os dados:
corpus_tf_idf = weightTfIdf(corpus_tf,normalize = T)
#Transformando em matrix, permitindo a manipulacao:
matrix=as.matrix(corpus_tf_idf)
#Criando a base de dados:
base=data.frame(y,t(matrix)) #Primeira coluna com a classe, a partir da segunda coluna são as variaveis
base[,1]=as.factor(base[,1]) #A classificacao deve ser um fator
library(devtools)
install_github("ropensci/plotly")
library(plotly)
library(ggplot2)
library(plotly)
install.packages("ggplot2")
library(plotly)
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
library(dplyr)
library(devtools)
library(plotly)
install_github("ropensci/plotly")
library(plotly)
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
p
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("ggplot2")
library(plotly)
install.packages("ggplot2")
library(plotly)
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
p
library(dplyr)
library(devtools)
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
p
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(dplyr)
library(plotly)
library(ggplot2)
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
p
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(dplyr)
library(plotly)
library(ggplot2)
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
p
