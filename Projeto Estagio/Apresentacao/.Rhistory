knitr::opts_chunk$set(echo = TRUE)
library(plotly)
install_github("ropensci/plotly")
install_github("ropensci/plotly")
install_github("ropensci/plotly")
install_github("ropensci/plotly")
install.packages("githubinstall")
install_github("ropensci/plotly")
library(githubinstall)
install_github("ropensci/plotly")
setwd("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao")
#Pacotes utilizados:
library(dplyr)
library(ggplot2)
install.packages(ggplot2)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao")
#Pacotes utilizados:
library(dplyr)
library(ggplot2)
library(GGally)
library(gridExtra)
library(ROCR)
library(tabplot)
library(knitr)
library(kableExtra)
library(caret)
library(e1071)
library(RSNNS)
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/classificado_classe_unica_prioridade.csv")
library(readr)
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
#Pacotes utilizados:
library(dplyr)
library(ggplot2)
library(GGally)
library(gridExtra)
library(ROCR)
library(tabplot)
library(knitr)
library(kableExtra)
library(caret)
library(e1071)
library(RSNNS)
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
dados=dados[,-1]
dados
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
dados
dados=dados$X1  #Retirando a primeira coluna queé composta apenas dos índices
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
dados=c(dados$classes,dados$setence)  #Retirando a primeira coluna queé composta apenas dos índices
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
dados=c(dados$classes,dados$key,dados$setence)  #
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
dados=c(dados$classes,dados$key,dados$setence)  # Dados que serão utilizados para o modelo
#Comando para print da base de dados:
kable(dados, "html")%>%
kable_styling()%>%
scroll_box(width = "1000px", height = "500px")
dados=as.data.frame(dados$classes,dados$key,dados$setence)  # Dados que serão utilizados para o modelo
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
dados=as.data.frame(dados$classes,dados$key,dados$setence)  # Dados que serão utilizados para o modelo
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
#Transformando a base para fator:
dados$classes=as.factor(dados$classes)
dados$key=as.factor(dados$key)
dados$sentence=as.factor(dados$sentence)
dados=as.data.frame(dados)
#Comando para print da base de dados:
kable(dados, "html")%>%
kable_styling()%>%
scroll_box(width = "1000px", height = "500px")
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
#Transformando a base para fator:
dados=dados[,-1]
dados$classes=as.factor(dados$classes)
dados$key=as.factor(dados$key)
dados$sentence=as.factor(dados$sentence)
dados=as.data.frame(dados)
#Comando para print da base de dados:
kable(dados, "html")%>%
kable_styling()%>%
scroll_box(width = "1000px", height = "500px")
tableplot(dados, sortCol = classes)
kable(t(table(dados$classes)), "html")%>%
kable_styling()
ggplot(aes(x=classes, fill=classes), data=dados)+geom_bar()
ggplot(data=dados,aes( x=sentence, fill=classes))+
geom_bar()+
facet_wrap(~classes)
kable(t(data.frame(table(dados$classes),table(dados$classes)/sum(table(dados$classes)))), "html")%>%
kable_styling()
kable(data.frame(table(dados$classes),table(dados$classes)/sum(table(dados$classes))), "html")%>%
kable_styling()
kable(data.frame(table(dados$classes),round(table(dados$classes)/sum(table(dados$classes)),4)), "html")%>%
kable_styling()
kable(data.frame(table(dados$classes),round(table(dados$classes)/sum(table(dados$classes))*100,2)), "html")%>%
kable_styling()
kable(data.frame("Freq"=table(dados$classes),"%"round(table(dados$classes)/sum(table(dados$classes))*100,2)), "html")%>%
kable(data.frame("Freq"=table(dados$classes),"%"=round(table(dados$classes)/sum(table(dados$classes))*100,2)), "html")%>%
kable_styling()
kable(data.frame(table(dados$classes),round(table(dados$classes)/sum(table(dados$classes))*100,2)), "html")%>%
kable_styling()
dados <- readRDS("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/dados.rds")
dados <- readRDS("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/dados.rds")
#Comando para print da base de dados:
kable(dados, "html")%>%
kable_styling()%>%
scroll_box(width = "1000px", height = "500px")
dados <- readRDS("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/dados.rds")
dados$classes=as.factor(dados$classes)
dados$sentence=as.factor(dados$sentence)
dados=as.data.frame(dados)
#Comando para print da base de dados:
kable(dados, "html")%>%
kable_styling()%>%
scroll_box(width = "1000px", height = "500px")
acuracia=0               #Iniciando uma vaiavel q guarda a evolução da acurácia
while(acuracia<0.5){     #Enquanto a acurácia for menor do que 60%
i=1
#Separando a amostra em 80% para treino e 20% para teste
amostra=sample(1:2, length(dados$classes), replace=T, prob=c(0.8,1-0.8))
train=dados[amostra==1,]
test=dados[amostra==2,]
#Criando o modelo:
modelo=naiveBayes(train[,-1],train[,1])
#Fazendo uma predicao:
previsao=predict(modelo, test[,-1], type="class");previsao
resposta=test[,1]
matrix_confusao=caret::confusionMatrix(previsao,resposta)
acuracia=matrix_confusao$overall[1]
}
acuracia
acuracia=0               #Iniciando uma vaiavel q guarda a evolução da acurácia
while(acuracia<0.6){     #Enquanto a acurácia for menor do que 60%
i=1
#Separando a amostra em 80% para treino e 20% para teste
amostra=sample(1:2, length(dados$classes), replace=T, prob=c(0.8,1-0.8))
train=dados[amostra==1,]
test=dados[amostra==2,]
#Criando o modelo:
modelo=naiveBayes(train[,-1],train[,1])
#Fazendo uma predicao:
previsao=predict(modelo, test[,-1], type="class");previsao
resposta=test[,1]
matrix_confusao=caret::confusionMatrix(previsao,resposta)
acuracia=matrix_confusao$overall[1]
}
acuracia=0               #Iniciando uma vaiavel q guarda a evolução da acurácia
while(acuracia<0.5){     #Enquanto a acurácia for menor do que 50%
i=1
#Separando a amostra em 80% para treino e 20% para teste
amostra=sample(1:2, length(dados$classes), replace=T, prob=c(0.8,1-0.8))
train=dados[amostra==1,]
test=dados[amostra==2,]
#Criando o modelo:
modelo=naiveBayes(train[,-1],train[,1])
#Fazendo predicao com os dados de teste:
previsao=predict(modelo, test[,-1], type="class");previsao
resposta=test[,1]
#Calculando a matrix de confusão:
matrix_confusao=caret::confusionMatrix(previsao,resposta)
acuracia=matrix_confusao$overall[1]
}
matrix_confusao
amostra=sample(1:2, length(dados$classes), replace=T, prob=c(0.8,1-0.8))
train=dados[amostra==1,]
test=dados[amostra==2,]
#Criando o modelo:
modelo=naiveBayes(train[,-1],train[,1])
#Fazendo predicao com os dados de teste:
previsao=predict(modelo, test[,-1], type="class");previsao
resposta=test[,1]
#Calculando a matrix de confusão:
caret::confusionMatrix(previsao,resposta)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
#Pacotes utilizados:
library(dplyr)
library(ggplot2)
library(GGally)
library(gridExtra)
library(ROCR)
library(tabplot)
library(knitr)
library(kableExtra)
library(caret)
library(e1071)
library(RSNNS)
dados <- read_csv("C:/Users/Fellipe/Dropbox/RPubs/Projeto Estagio/Apresentacao/classificado_classe_unica_prioridade.csv")
#Transformando a base para fator:
dados=dados[,-1]
dados$classes=as.factor(dados$classes)
dados$key=as.factor(dados$key)
dados$sentence=as.factor(dados$sentence)
dados=as.data.frame(dados)
#Comando para print da base de dados:
kable(dados, "html")%>%
kable_styling()%>%
scroll_box(width = "1000px", height = "500px")
tableplot(dados, sortCol = classes)
kable(data.frame(table(dados$classes),round(table(dados$classes)/sum(table(dados$classes))*100,2)), "html")%>%
kable_styling()
ggplot(aes(x=classes, fill=classes), data=dados)+geom_bar()
ggplot(data=dados,aes( x=sentence, fill=classes))+
geom_bar()+
facet_wrap(~classes)
amostra=sample(1:2, length(dados$classes), replace=T, prob=c(0.8,1-0.8))
train=dados[amostra==1,]
test=dados[amostra==2,]
#Criando o modelo:
modelo=naiveBayes(train[,-1],train[,1])
#Fazendo predicao com os dados de teste:
previsao=predict(modelo, test[,-1], type="class");previsao
resposta=test[,1]
#Calculando a matrix de confusão:
caret::confusionMatrix(previsao,resposta)
amostra=sample(1:2, length(dados$classes), replace=T, prob=c(0.7,1-0.7))
train=dados[amostra==1,]
test=dados[amostra==2,]
#Criando o modelo:
modelo=naiveBayes(train[,-1],train[,1])
#Fazendo predicao com os dados de teste:
previsao=predict(modelo, test[,-1], type="class");previsao
resposta=test[,1]
#Calculando a matrix de confusão:
caret::confusionMatrix(previsao,resposta)
acuracia=0               #Iniciando uma vaiavel q guarda a evolução da acurácia
while(acuracia<0.55){     #Enquanto a acurácia for menor do que 55%
i=1
#Separando a amostra em 80% para treino e 20% para teste
amostra=sample(1:2, length(dados$classes), replace=T, prob=c(0.7,1-0.7))
train=dados[amostra==1,]
test=dados[amostra==2,]
#Criando o modelo:
modelo=naiveBayes(train[,-1],train[,1])
#Fazendo predicao com os dados de teste:
previsao=predict(modelo, test[,-1], type="class");previsao
resposta=test[,1]
#Calculando a matrix de confusão:
matrix_confusao=caret::confusionMatrix(previsao,resposta)
acuracia=matrix_confusao$overall[1]
}
#Remove acentos
rm_accent <- function(str,pattern="all") {
# Rotinas e funções úteis V 1.0
# rm.accent - REMOVE ACENTOS DE PALAVRAS
# Função que tira todos os acentos e pontuações de um vetor de strings.
# Parâmetros:
# str - vetor de strings que terão seus acentos retirados.
# patterns - vetor de strings com um ou mais elementos indicando quais acentos deverão ser retirados.
#            Para indicar quais acentos deverão ser retirados, um vetor com os símbolos deverão ser passados.
#            Exemplo: pattern = c("´", "^") retirará os acentos agudos e circunflexos apenas.
#            Outras palavras aceitas: "all" (retira todos os acentos, que são "´", "`", "^", "~", "¨", "ç")
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
nudeSymbols <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(nudeSymbols, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],nudeSymbols[i], str)
return(str)
}
