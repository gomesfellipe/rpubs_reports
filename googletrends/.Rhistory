cadeia.tau.b[i,l]     = rgamma(1, (N/2)+a, b+ (sum((cadeia.b[i-1,,l])^2)/2) )
#cadeia.mu
c                     = 1/((N*M*cadeia.tau.y[i,l]) + (1/V))
m                     = cadeia.tau.y[i,l]*sum(y[,,l]- matrix(cadeia.b[i-1,,l],N,1) %*% matrix(1,1,M)) * c
cadeia.mu[i,l]        = rnorm(1, m, sqrt(c))
}
print(i)
}
data.frame("media"=mu,"tau.y"=tau.y,"tau.b"=tau.b)
estimativa.cadeia.mu=c(mean(cadeia.mu[,1]),
mean(cadeia.mu[,2]))
estimativa.cadeia.tau.y=c(mean(cadeia.tau.y[,1]),
mean(cadeia.tau.y[,2]))
estimativa.cadeia.tau.b=c(mean(cadeia.tau.b[,1]),
mean(cadeia.tau.b[,2]))
data.frame("media"=estimativa.cadeia.mu,"tau.y"=estimativa.cadeia.tau.y,"tau.b"=estimativa.cadeia.tau.b)
xtable(data.frame("media"=estimativa.cadeia.mu,"tau.y"=estimativa.cadeia.tau.y,"tau.b"=estimativa.cadeia.tau.b)     )
xtable::xtable(data.frame("media"=estimativa.cadeia.mu,"tau.y"=estimativa.cadeia.tau.y,"tau.b"=estimativa.cadeia.tau.b)     )
tabela1=data.frame("media"=mu,"tau.y"=tau.y,"tau.b"=tau.b);tabela1
xtable::xtable(tabela1)
tabela2=data.frame("media"=estimativa.cadeia.mu,"tau.y"=estimativa.cadeia.tau.y,"tau.b"=estimativa.cadeia.tau.b);tabela2
xtable::xtable( dplyr::bind_cols(tabela1, tabela2)    )
tabela2
xtable::xtable( dplyr::bind_cols(tabela1, tabela2))
tabela1=data.frame("media"=mu,"tau.y"=tau.y,"tau.b"=tau.b);tabela1
#analisando a convergencia
par(mfrow=c(1,2))
png("acf_mu.png")
par(mfrow=c(1,2))
acf(cadeia.mu[,1], main="Autocorrelação total da cadeia média")
acf(cadeia.mu[,2], main="Autocorrelação total da cadeia média")
dev.off()
png("acf_tau_y.png")
par(mfrow=c(1,2))
acf(cadeia.tau.y[,1], main="Autocorrelação total da cadeia tau")
acf(cadeia.tau.y[,2], main="Autocorrelação total da cadeia tau")
dev.off()
png("acf_tau_b.png")
par(mfrow=c(1,2))
acf(cadeia.tau.b[,1], main="Autocorrelação total da cadeia tau")
acf(cadeia.tau.b[,2], main="Autocorrelação total da cadeia tau")
dev.off()
par(mfrow=c(1,1))
png("acf_b.png")
acf(cadeia.b[,1,1], main="Autocorrelação de bi")
dev.off()
burnin = 1:120
indis  = seq(151,nsim,by=20 )
par(mfrow=c(1,2))
png("acf_mu_bn.png")
par(mfrow=c(1,2))
acf(cadeia.mu[indis,1], main="Autocorrelação -burnin da cadeia média")
acf(cadeia.mu[indis,2], main="Autocorrelação -burnin da cadeia média")
dev.off()
png("acf_tau_y_bn.png")
par(mfrow=c(1,2))
acf(cadeia.tau.y[indis,1], main="Autocorrelação -burnin da cadeia tau")
acf(cadeia.tau.y[indis,2], main="Autocorrelação -burnin da cadeia tau")
dev.off()
png("acf_tau_b_bn.png")
par(mfrow=c(1,2))
acf(cadeia.tau.b[indis], main="Autocorrelação -burnin da cadeia tau")
acf(cadeia.tau.b[indis], main="Autocorrelação -burnin da cadeia tau")
dev.off()
par(mfrow=c(1,1))
png("acf_b.png")
acf(cadeia.b[indis,1,1], main="Autocorrelação de bi")
dev.off()
png("evolucao_mu1.png")
par(mfrow=c(2,1))
#Evolucao da cadeia mu
l = 1
plot(1:nsim,cadeia.mu[,l],type="l",frame=F,ylab=expression(mu[1]),xlab="Iteracoes",main="Evolução total da cadeia da média 1")
abline(h=mu[l],lty=1,col="red",lwd=2)
plot(cadeia.mu[indis,l],type="l",ylab=expression(mu[1]),xlab="Iteracoes",main="Evolução -burnin da cadeia da média 1")
abline(h=mu[l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.mu[indis,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.mu[indis,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.mu[indis,l],0.975),lty=3,col="blue",lwd=3)
dev.off()
png("evolucao_mu2.png")
par(mfrow=c(2,1))
#Evolucao da cadeia media 2
l = 2
plot(1:nsim,cadeia.mu[,l],type="l",frame=F,ylab=expression(mu[2]),xlab="Iteracoes",main="Evolução total da cadeia da média 2")
abline(h=mu[l],lty=1,col="red",lwd=2)
plot(cadeia.mu[indis,l],type="l",ylab=expression(mu[2]),xlab="Iteracoes",main="Evolução -burnin da cadeia da média 2")
abline(h=mu[l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.mu[indis,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.mu[indis,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.mu[indis,l],0.975),lty=3,col="blue",lwd=3)
dev.off()
png("evolucao_tauy1.png")
par(mfrow=c(2,1))
#Evolucao da cadeia tau y 1
l = 1
plot(1:nsim,cadeia.tau.y[,l],type="l",ylab=expression(tau[1]),xlab="iteracoes",main="Evolução total da cadeia de tau y 1")
abline(h=tau.y[l,l],lty=1,col="red",lwd=2)
plot(cadeia.tau.y[indis,l],type="l",ylab=expression(tau[1]),xlab="iteracoes",main="Evolução -burnin da cadeia de tau y 1")
abline(h=tau.y[l,l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.tau.y[indis,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.tau.y[indis,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.tau.y[indis,l],0.975),lty=3,col="blue",lwd=3)
dev.off()
png("evolucao_tauy2.png")
par(mfrow=c(2,1))
#Evolucao da cadeia tau y 2
l = 2
plot(1:nsim,cadeia.tau.y[,l],type="l",ylab=expression(tau[2]),xlab="iteracoes",main="Evolução total da cadeia de tau y 2")
abline(h=tau.y[l,l],lty=1,col="red",lwd=2)
plot(cadeia.tau.y[indis,l],type="l",ylab=expression(tau[2]),xlab="iteracoes",main="Evolução -burnin da cadeia de tau y 2")
abline(h=tau.y[l,l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.tau.y[indis,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.tau.y[indis,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.tau.y[indis,l],0.975),lty=3,col="blue",lwd=3)
dev.off()
png("evolucao_taub1.png")
par(mfrow=c(2,1))
#Evolucao da cadeia tau b 1
l = 1
plot(1:nsim,cadeia.tau.b[,l],type="l",ylab="tau.b_1",xlab="iteracoes",main="Evolução total da cadeia de tau b 1")
abline(h=tau.b[l,l],lty=1,col="red",lwd=2)
plot(cadeia.tau.b[indis,l],type="l",ylab="tau.b_1",xlab="iteracoes",main="Evolução -burnin da cadeia de tau b 1")
abline(h=tau.b[l,l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.tau.b[indis,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.tau.b[indis,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.tau.b[indis,l],0.975),lty=3,col="blue",lwd=3)
dev.off()
png("evolucao_taub2.png")
par(mfrow=c(2,1))
#Evolucao da cadeia tau b 2
l = 2
plot(1:nsim,cadeia.tau.b[,l],type="l",ylab="tau.b_2",xlab="iteracoes",main="Evolução total da cadeia de tau b 2")
abline(h=tau.b[l,l],lty=1,col="red",lwd=2)
plot(cadeia.tau.b[indis,l],type="l",ylab="tau.b_2",xlab="iteracoes",main="Evolução -burnin da cadeia de tau b 2")
abline(h=tau.b[l,l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.tau.b[indis,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.tau.b[indis,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.tau.b[indis,l],0.975),lty=3,col="blue",lwd=3)
dev.off()
png("evolucao_b1.png")
#Evolucao da cadeia bi
par(mfrow=c(3,3))
inds = sample(1:N,9)
for(i in 1:9)
{
ind = inds[i]
l = 1
plot(cadeia.b[indis,ind,l],type="l",ylab=expression(b[i]),xlab="iteracoes",main="Evolução -burnin da cadeia bi")
abline(h=bk[ind,l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.b[indis,ind,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.b[indis,ind,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.b[indis,ind,l],0.975),lty=3,col="blue",lwd=3)
}
dev.off()
png("evolucao_b2.png")
par(mfrow=c(3,3))
inds = sample(1:N,9)
for(i in 1:9)
{
ind = inds[i]
l = 2
plot(cadeia.b[indis,ind,l],type="l",ylab=expression(b[i]),xlab="iteracoes",main="Evolução -burnin da cadeia bi")
abline(h=bk[ind,l],lty=1,col="red",lwd=3)
abline(h=mean(cadeia.b[indis,ind,l]), col="blue",lwd=3)
abline(h=quantile(cadeia.b[indis,ind,l],0.25),lty=3,col="blue",lwd=3)
abline(h=quantile(cadeia.b[indis,ind,l],0.975),lty=3,col="blue",lwd=3)
}
dev.off()
#Medias e matriz de covariancias retiradas do exemplo da apostila
tabela1=data.frame("media"=mu,"tau.y"=tau.y,"tau.b"=tau.b);tabela1
estimativa.cadeia.mu=c(mean(cadeia.mu[,1]),
mean(cadeia.mu[,2]))
estimativa.cadeia.tau.y=c(mean(cadeia.tau.y[,1]),
mean(cadeia.tau.y[,2]))
estimativa.cadeia.tau.b=c(mean(cadeia.tau.b[,1]),
mean(cadeia.tau.b[,2]))
tabela2=data.frame("media"=estimativa.cadeia.mu,"tau.y"=estimativa.cadeia.tau.y,"tau.b"=estimativa.cadeia.tau.b);tabela2
kable(dplyr::bind_cols(tabela1, tabela2), "html")%>%
kable_styling()
knitr::opts_chunk$set(echo = TRUE)
#Pacotes que serao utilizados:
require(mvtnorm)
require(kableExtra)
#Medias e matriz de covariancias retiradas do exemplo da apostila
tabela1=data.frame("media"=mu,"tau.y"=tau.y,"tau.b"=tau.b);tabela1
estimativa.cadeia.mu=c(mean(cadeia.mu[,1]),
mean(cadeia.mu[,2]))
estimativa.cadeia.tau.y=c(mean(cadeia.tau.y[,1]),
mean(cadeia.tau.y[,2]))
estimativa.cadeia.tau.b=c(mean(cadeia.tau.b[,1]),
mean(cadeia.tau.b[,2]))
tabela2=data.frame("media"=estimativa.cadeia.mu,"tau.y"=estimativa.cadeia.tau.y,"tau.b"=estimativa.cadeia.tau.b);tabela2
kable(dplyr::bind_cols(tabela1, tabela2), "html")%>%
kable_styling()
require(mvtnorm)
require(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
#Pacotes que serao utilizados:
require(mvtnorm)
require(kableExtra)
require(dplyr)
install.packages(data.table, dependencies = T)
install.packages(data.table, dependencies = T)
install.packages(data.table, dependencies = T)
install.packages("data.table", dependencies = T)
install.packages("data.table", dependencies = T)
install.packages("data.table", dependencies = T)
install.packages("data.table", dependencies = T)
install.packages("data.table", dependencies = T)
install.packages("abjutils", dependencies = T)
install.packages("data.table", dependencies = T)
knitr::opts_chunk$set(echo = TRUE)
#Pacotes utilizados:
library(dplyr)
library(R2OpenBUGS)
library(ggplot2)
library(GGally)
library(coda)
library(lattice)
library(rpart)
library(rpart.plot)
library(gridExtra)
library(ROCR)
library(tabplot)
library(knitr)
library(kableExtra)
library(lubridate)
library(RSNNS)
library(caret)
library(FSelector)   #Metodos para selecionar os atributos
library(RSNNS)
library(nnet)
library(devtools)
library(scales)
library(reshape)
library(rattle)
#Dados que serão utilizados:
base=readRDS("modelo.rds")
basefator=readRDS("modelofator.rds")
data=readRDS("suicidio.rds")
base=base[,-c(4,5,6,12,13,16)]
dados=na.omit(base)
glimpse(base)
glimpse(dados)
glimpse(basefator)
basefator$condenado=as.factor(basefator$condenado)
basefator$condenado=relevel(basefator$condenado, "Sim")
library(rjags)
library(coinmarketcapr)
plot_top_5_currencies()
market_today <- get_marketcap_ticker_all()
head(market_today[,1:8])
market_today
View(market_today)
install.packages("rgdal")
install.packages("sp")
install.packages("plotGoogleMaps")
install.packages("rworldmap")
install.packages("RgoogleMaps")
install.packages("googleVis")
install.packages("spdep")
install.packages("ggmap")
#Para ativar os pacotes
require(maptools)
install.packages("blogdown")
blogdown::serve_site()
options(servr.daemon = TRUE)
blogdown::serve_site()
library(blogdown)
options(servr.daemon = TRUE)
blogdown::serve_site()
install.packages("hugo")
install_hugo()
devtools::install_github('rstudio/blogdown')
blogdown::new_site()
blogdown::new_site()
library(blogdown)
install_hugo()
new_site(dir = 'C:/Users/Fellipe/Documents/Git/blogdown_source', theme = 'kakawait/hugo-tranquilpeak-theme', format = 'toml')
new_site(dir = 'C:/Users/Fellipe/Documents/Git/blogdown_source', theme = 'kakawait/hugo-tranquilpeak-theme', format = 'toml')
new_site(dir = 'C:/Users/Fellipe/Documents/Git/blogdown_source', theme = 'kakawait/hugo-tranquilpeak-theme', format = 'toml')
new_site(dir = 'C:/Users/Fellipe/Documents/Git/blogdown_source', theme = 'kakawait/hugo-tranquilpeak-theme', format = 'toml')
new_post(title = 'hello-world.Rmd')
new_site(dir = 'C:/Users/Fellipe/Documents/Git/blogdown_source', theme = 'kakawait/hugo-tranquilpeak-theme', format = 'toml')
new_post(title = 'hello-world.Rmd')
new_post(title = 'hello-world.Rmd')
devtools::install_github('rstudio/blogdown')
setwd("~/")
library(readxl)
base <- read_excel("C:/Users/Gabriel/Desktop/TCC - F/FINAL/Projeção/Gini.xlsx")
base <- read_excel("C:/Gini.xlsx")
library(readxl)
base <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
names(base)
base
names(base)
names(base)=c("ano", "gini")
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
base <- read_excel("C:/Users/Gabriel/Desktop/TCC - F/FINAL/Projeção/Gini.xlsx")
base <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
base <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
names(base)
names(base)=c("Ano", "gini")
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
base <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
gini=base$Gini
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
tendencia=lm(base$Gini~ base$Ano)
summary(tendencia)
abline(tendencia, col="blue", lty=2, lwd=2)
abline(tendencia, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
gini=ts(base$Gini, start=1995, end=2015, frequency=1); gini
plot(gini)
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
require(randtests)
install.packages("randtests")
?randtests::runs.test
library(readxl)
dados <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
knitr::opts_chunk$set(echo = TRUE)
dados <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
gini=dados$Gini
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
# tendencia=lm(base$Gini~ base$Ano)
# summary(tendencia)
abline(tendencia, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
plot(gini)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
#Lendo os dados
library(readxl)
dados <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
gini=dados$Gini
#Plot dos dados
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
# tendencia=lm(base$Gini~ base$Ano)
# summary(tendencia)
abline(tendencia, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
##Transformando em obj ts (time series)
gini=ts(base$Gini, start=1995, end=2015, frequency=1); gini
plot(gini)
#install.packages("randtests")
require(randtests)
?randtests::runs.test
#Teste de Wald - Wolfowitz - Temos tendência - logo temos que diferenciar a série para tirá-la
randtests::runs.test(base$Gini)
# Diferenciar a série para tirar a tendência
dif=diff(base$Gini)
ginidif=cbind(base$Ano[-1],dif)
colnames(ginidif)<-c("Ano","Gini")
class(ginidif)
# Diferenciar a série para tirar a tendência
dif=diff(base$Gini)
ginidif=cbind(base$Ano[-1],dif)
colnames(ginidif)<-c("Ano","Gini")
#class(ginidif)
ginidif=as.data.frame(ginidif)
ginidif$Gini
gini2=ts(ginidif$Gini, start=1996, end=2015, frequency=1)
#tendencia2=lm(ginidif$Gini~ ginidif$Ano)
plot(gini2)
plot(gini2,type="o",pch=19,lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
#abline(tendencia2, col="blue", lty=2, lwd=2)
#legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
#summary(tendencia2)
#plot(gini2)
plot(gini2,type="o",pch=19,lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
abline(tendencia2, col="blue", lty=2, lwd=2)
# Diferenciar a série para tirar a tendência
dif=diff(base$Gini)
ginidif=cbind(base$Ano[-1],dif)
colnames(ginidif)<-c("Ano","Gini")
#class(ginidif)
ginidif=as.data.frame(ginidif)
ginidif$Gini
gini2=ts(ginidif$Gini, start=1996, end=2015, frequency=1)
tendencia2=lm(ginidif$Gini~ ginidif$Ano)
#plot(gini2)
plot(gini2,type="o",pch=19,lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
abline(tendencia2, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
#summary(tendencia2)
# Diferenciar a série para tirar a tendência
dif=diff(base$Gini)
ginidif=cbind(base$Ano[-1],dif)
colnames(ginidif)<-c("Ano","Gini")
#class(ginidif)
ginidif=as.data.frame(ginidif)
ginidif$Gini
gini2=ts(ginidif$Gini, start=1996, end=2015, frequency=1)
#tendencia2=lm(ginidif$Gini~ ginidif$Ano)
dif=diff(base$Gini)
ginidif=cbind(base$Ano[-1],dif)
colnames(ginidif)<-c("Ano","Gini")
ginidif=as.data.frame(ginidif)
ginidif$Gini
gini2=ts(ginidif$Gini, start=1996, end=2015, frequency=1)
#plot(gini2)
plot(gini2,type="o",pch=19,lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
#abline(tendencia2, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
#summary(tendencia2)
install.packages("forecast")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
#Lendo os dados
library(readxl)
dados <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
gini=dados$Gini
#Plot dos dados
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
# tendencia=lm(base$Gini~ base$Ano)
# summary(tendencia)
abline(tendencia, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
##Transformando em obj ts (time series)
gini=ts(base$Gini, start=1995, end=2015, frequency=1); gini
plot(gini)
#install.packages("randtests")
require(randtests)
?randtests::runs.test
#Teste de Wald - Wolfowitz - Temos tendência - logo temos que diferenciar a série para tirá-la
randtests::runs.test(base$Gini)
#plot(gini2)
plot(gini2,type="o",pch=19,lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
#abline(tendencia2, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
#summary(tendencia2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
#Lendo os dados
library(readxl)
dados <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
gini=dados$Gini
#Plot dos dados
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
# tendencia=lm(base$Gini~ base$Ano)
# summary(tendencia)
abline(tendencia, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
##Transformando em obj ts (time series)
gini=ts(base$Gini, start=1995, end=2015, frequency=1); gini
plot(gini)
#install.packages("randtests")
require(randtests)
?randtests::runs.test
#Teste de Wald - Wolfowitz - Temos tendência - logo temos que diferenciar a série para tirá-la
randtests::runs.test(base$Gini)
#plot(gini2)
plot(gini2,type="o",pch=19,lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
#abline(tendencia2, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
#summary(tendencia2)
# Não tem mais Tendência
randtests::runs.test(ginidif$Gini)
###### ARIMA ##########
#install.packages("forecast")
library(forecast)
#passeio aleatório - temos que diferenciar 1 vez
auto.arima(gini)
###### ARIMA ##########
#install.packages("forecast")
suppressMessages(library(forecast))
#passeio aleatório - temos que diferenciar 1 vez
auto.arima(gini)
#######################################################
#Suavizacao exponencial de Holt
#######################################################
plot(base,type="l",lwd=2,ylab="Gini",xlab="Anos",bty="n" ,cex.lab=1.4,cex.axis=1.4)
#melhores parametros
HW    = HoltWinters(gini, gamma = FALSE)
alfa = HW$alpha
beta = HW$beta
?HoltWinters
HW    = HoltWinters(gini, alpha=alfa, beta=beta, gamma = FALSE)
(alfam  = HW$alpha)
(betam  = HW$beta)
HW$fitted
(HWp=predict(HW, n.ahead = 12, prediction.interval = T))
plot(HW,HWp,type="o",bty="n",pch=19,lwd=1.5,ylim=c(0.4,0.65),xlab="Anos",ylab="Valores Gini",
main="Suavização Exponencial de Holt - Índice - Gini")
legend("topright", legend=c("SEH e Previsão", "Intervalo de Confiança"),
lty=1, col=c("Red","Blue"), lwd=2, bty="n", pch=c(19,NA))
print(?HoltWinters)
HW$fitted
HW    = HoltWinters(gini, alpha=alfa, beta=beta, gamma = FALSE)
(alfam  = HW$alpha)
plot(HW,HWp,type="o",bty="n",pch=19,lwd=1.5,ylim=c(0.4,0.65),xlab="Anos",ylab="Valores Gini",
main="Suavização Exponencial de Holt - Índice - Gini")
(HWp=predict(HW, n.ahead = 12, prediction.interval = T))
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
#Lendo os dados
library(readxl)
dados <- read_excel("C:/Users/Fellipe/Dropbox/Estatistica Aplicada II/Séries Temporais/Gini.xlsx")
gini=dados$Gini
#Plot dos dados
plot(gini,type="o",pch=19, ylim=c(0.5,0.65),lwd=1.5, main="Evolução Histórica Gini - 1995 a 2015", ylab= "Valor Gini")
# tendencia=lm(base$Gini~ base$Ano)
# summary(tendencia)
abline(tendencia, col="blue", lty=2, lwd=2)
legend("bottomright","Tendência",col='Blue', lty=2, lwd=2)
setwd("C:/Users/Fellipe/Dropbox/RPubs/googletrends")
setwd("~/")
setwd("C:/Users/Fellipe/Dropbox/RPubs/googletrends")
